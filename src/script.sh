#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([database],[d],[the database name],[habits.db])
# ARG_OPTIONAL_SINGLE([update],[u],[specify the date to be updated],[""])
# ARG_OPTIONAL_BOOLEAN([silent],[s],[silent mode])
# ARG_POSITIONAL_SINGLE([mode],[the mode (currently: run, test, export)],[run])
# ARG_DEFAULTS_POS()
# ARG_POSITIONAL_DOUBLEDASH([])
# ARG_HELP([habits: A habit tracker for the CLI using Bash and SQLite])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='dush'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_mode="run"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_database="habits.db"
_arg_update=""
_arg_silent="off"


print_help()
{
	printf '%s\n' "habits: A habit tracker for the CLI using Bash and SQLite"
	printf 'Usage: %s [-d|--database <arg>] [-u|--update <arg>] [-s|--(no-)silent] [-h|--help] [--] [<mode>]\n' "$0"
	printf '\t%s\n' "<mode>: the mode (currently: run, test, export) (default: 'run')"
	printf '\t%s\n' "-d, --database: the database name (default: 'habits.db')"
	printf '\t%s\n' "-u, --update: specify the date to be updated (default: '""')"
	printf '\t%s\n' "-s, --silent, --no-silent: silent mode (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		if test "$_key" = '--'
		then
			shift
			test $# -gt 0 || break
			_positionals+=("$@")
			_positionals_count=$((_positionals_count + $#))
			shift $(($# - 1))
			_last_positional="$1"
			break
		fi
		case "$_key" in
			-d|--database)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_database="$2"
				shift
				;;
			--database=*)
				_arg_database="${_key##--database=}"
				;;
			-d*)
				_arg_database="${_key##-d}"
				;;
			-u|--update)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_update="$2"
				shift
				;;
			--update=*)
				_arg_update="${_key##--update=}"
				;;
			-u*)
				_arg_update="${_key##-u}"
				;;
			-s|--no-silent|--silent)
				_arg_silent="on"
				test "${1:0:5}" = "--no-" && _arg_silent="off"
				;;
			-s*)
				_arg_silent="on"
				_next="${_key##-s}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-s" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_mode "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# vvv  PLACE YOUR CODE HERE  vvv
# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
